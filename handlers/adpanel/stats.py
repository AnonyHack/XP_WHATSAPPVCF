import logging
from pyrogram import Client, filters
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from config import ADMIN_IDS
from database.connection import get_db
from database.users import total_users_count

# Setup logging
logger = logging.getLogger(__name__)

def is_admin(user_id: int) -> bool:
    """Check if the user is an admin."""
    return user_id in ADMIN_IDS

@Client.on_message(filters.command("stats") & filters.private)
async def handle_stats(client: Client, message):
    """Display bot statistics including all group IDs and total users who started the bot."""
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.reply_text("🚫 You are not authorized to use this command.")
        logger.warning(f"Unauthorized /stats attempt by user {user_id}")
        return

    try:
        logger.debug(f"Starting /stats for user {user_id}")
        db = get_db()
        logger.debug("Connected to database")

        total_started_users = total_users_count()
        total_users_with_submissions = db.users.count_documents({"name": {"$exists": True}})
        total_groups = db.groups.count_documents({})
        active_groups = db.groups.count_documents({"status": "active"})
        full_groups = db.groups.count_documents({"status": "full"})
        approved_groups = db.groups.count_documents({"status": "approved"})
        watermark_doc = db.config.find_one({"key": "watermark"})
        watermark = watermark_doc["value"] if watermark_doc else "Generated by WhatsApp Status Bot"
        logger.debug(f"Fetched counts: started_users={total_started_users}, users_with_submissions={total_users_with_submissions}, groups={total_groups}, active={active_groups}, full={full_groups}, approved={approved_groups}, watermark={watermark}")

        # Fetch all group IDs
        groups = db.groups.find().sort("group_id", 1)
        group_ids = [group["group_id"] for group in groups]
        logger.debug(f"Fetched {len(group_ids)} group IDs: {group_ids}")

        # Build group IDs section
        group_ids_text = "💠 Group IDs:\n" + "\n".join([f"▪️ Group {group_id}" for group_id in group_ids]) if group_ids else "💠 Group IDs: None"
        logger.debug(f"Group IDs text: {group_ids_text}")

        message_text = (
            "📊 Bot Statistics\n\n"
            f"👥 Total Users Started: {total_started_users}\n"
            f"👤 Total Users with Submissions: {total_users_with_submissions}\n"
            f"📦 Total Groups: {total_groups}\n"
            f"📥 Active Groups: {active_groups}\n"
            f"⏳ Full Groups: {full_groups}\n"
            f"✅ Approved Groups: {approved_groups}\n"
            f"🖌️ Current Watermark: {watermark}\n\n"
            f"{group_ids_text}"
        )
        await message.reply_text(
            message_text,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("🏠 Back to Home", callback_data="back_to_home")]
            ])
        )
        logger.info(f"Displayed stats with {len(group_ids)} group IDs for user {user_id}")
    except Exception as e:
        await message.reply_text(
            "❌ An error occurred while fetching stats. Please try again.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("🏠 Back to Home", callback_data="back_to_home")]
            ])
        )
        logger.error(f"Error fetching stats for user {user_id}: {e}", exc_info=True)
