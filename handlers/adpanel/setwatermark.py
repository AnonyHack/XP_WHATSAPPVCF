import logging
from pyrogram import Client, filters
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from config import ADMIN_IDS
from database.connection import get_db
from datetime import datetime

# Setup logging
logger = logging.getLogger(__name__)

def is_admin(user_id: int) -> bool:
    """Check if the user is an admin."""
    return user_id in ADMIN_IDS

@Client.on_message(filters.command("setwatermark") & filters.private)
async def handle_setwatermark(client: Client, message):
    """Set the watermark text for VCF files."""
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.reply_text("🚫 You are not authorized to use this command.")
        logger.warning(f"Unauthorized /setwatermark attempt by user {user_id}")
        return

    # Extract watermark text from command
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.reply_text(
            "Usage: /setwatermark <text>\nExample: /setwatermark Generated by StatusBot",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("🏠 Back to Home", callback_data="back_to_home")]
            ])
        )
        logger.info(f"Invalid /setwatermark command by user {user_id}: {message.text}")
        return

    watermark = args[1].strip()
    try:
        # Persist watermark to database
        db = get_db()
        db.config.update_one(
            {"key": "watermark"},
            {"$set": {"value": watermark, "updated_at": datetime.now()}},
            upsert=True
        )
        await message.reply_text(
            f"✅ Watermark set to: {watermark}",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("🏠 Back to Home", callback_data="back_to_home")]
            ])
        )
        logger.info(f"Set watermark to '{watermark}' by user {user_id}")
    except Exception as e:
        await message.reply_text(
            "❌ An error occurred while setting the watermark. Please try again.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("🏠 Back to Home", callback_data="back_to_home")]
            ])
        )
        logger.error(f"Error setting watermark for user {user_id}: {e}")